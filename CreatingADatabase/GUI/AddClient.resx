<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SUVORK5CYII=
</value>
  </data>
</root>